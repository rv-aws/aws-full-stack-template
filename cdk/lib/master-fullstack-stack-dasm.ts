// generated by cdk-dasm at 2020-07-28T01:56:05.702Z

import { Stack, StackProps, Construct, Fn } from '@aws-cdk/core';
import iam = require('@aws-cdk/aws-iam');
import dynamodb = require('@aws-cdk/aws-dynamodb');
import lambda = require('@aws-cdk/aws-lambda');
import apigateway = require('@aws-cdk/aws-apigateway');
import cognito = require('@aws-cdk/aws-cognito');
import codecommit = require('@aws-cdk/aws-codecommit');
import s3 = require('@aws-cdk/aws-s3');
import cloudfront = require('@aws-cdk/aws-cloudfront');
import codebuild = require('@aws-cdk/aws-codebuild');
import codepipeline = require('@aws-cdk/aws-codepipeline');
//import repositoryseeder = require('@aws-cdk/aws-repositoryseeder');
//import customresource = require('@aws-cdk/aws-customresource');

export class MyStack extends Stack {
  constructor(scope: Construct, id: string, props: StackProps = {}) {
    super(scope, id, props);

    /* ###completed#### dynamo objects*/
    //#region 
    /*
    new iam.CfnRole(this, 'DynamoDbRole', {
        assumeRolePolicyDocument: {
          "version": "2012-10-17",
          "statement": [
            {
              "effect": "Allow",
              "principal": {
                "service": [
                  "lambda.amazonaws.com"
                ]
              },
              "action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        managedPolicyArns: [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        policies: [
          {
            "policyName": "GoalsPolicy",
            "policyDocument": {
              "version": "2012-10-17",
              "statement": [
                {
                  "effect": "Allow",
                  "action": [
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:DeleteItem"
                  ],
                  "resource": {
                    "Fn::GetAtt": [
                      "TGoals",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ],
    });
    new dynamodb.CfnTable(this, 'TGoals', {
        tableName: {
          "Ref": "ProjectName"
        },
        attributeDefinitions: [
          {
            "attributeName": "userId",
            "attributeType": "S"
          },
          {
            "attributeName": "goalId",
            "attributeType": "S"
          }
        ],
        keySchema: [
          {
            "attributeName": "userId",
            "keyType": "HASH"
          },
          {
            "attributeName": "goalId",
            "keyType": "RANGE"
          }
        ],
        provisionedThroughput: {
          "readCapacityUnits": 1,
          "writeCapacityUnits": 1
        },
    });
    */
    //#endregion

    /* ###completed### lambda functions*/
    //#region 
    new lambda.CfnFunction(this, 'FunctionListGoals', {
      functionName: {
        "Fn::Sub": "${ProjectName}-ListGoals"
      },
      description: "Get list of goals for userId",
      handler: "index.handler",
      memorySize: 256,
      runtime: "nodejs12.x",
      role: {
        "Fn::GetAtt": [
          "DynamoDbRole",
          "Arn"
        ]
      },
      timeout: 120,
      environment: {
        "variables": {
          "tableName": {
            "Ref": "ProjectName"
          }
        }
      },
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "ListGoalsCode"
          ]
        }
      },
    });
    new lambda.CfnFunction(this, 'FunctionCreateGoal', {
      functionName: {
        "Fn::Sub": "${ProjectName}-CreateGoal"
      },
      description: "Create goal for user id",
      handler: "index.handler",
      memorySize: 256,
      runtime: "nodejs12.x",
      role: {
        "Fn::GetAtt": [
          "DynamoDbRole",
          "Arn"
        ]
      },
      timeout: 120,
      environment: {
        "variables": {
          "tableName": {
            "Ref": "ProjectName"
          }
        }
      },
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "CreateGoalCode"
          ]
        }
      },
    });
    new lambda.CfnFunction(this, 'FunctionDeleteGoal', {
      functionName: {
        "Fn::Sub": "${ProjectName}-DeleteGoal"
      },
      description: "Delete goal for user id",
      handler: "index.handler",
      memorySize: 256,
      runtime: "nodejs12.x",
      role: {
        "Fn::GetAtt": [
          "DynamoDbRole",
          "Arn"
        ]
      },
      timeout: 120,
      environment: {
        "variables": {
          "tableName": {
            "Ref": "ProjectName"
          }
        }
      },
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "DeleteGoalCode"
          ]
        }
      },
    });
    new lambda.CfnFunction(this, 'FunctionUpdateGoal', {
      functionName: {
        "Fn::Sub": "${ProjectName}-UpdateGoal"
      },
      description: "Update goal for user id",
      handler: "index.handler",
      memorySize: 256,
      runtime: "nodejs12.x",
      role: {
        "Fn::GetAtt": [
          "DynamoDbRole",
          "Arn"
        ]
      },
      timeout: 120,
      environment: {
        "variables": {
          "tableName": {
            "Ref": "ProjectName"
          }
        }
      },
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "UpdateGoalCode"
          ]
        }
      },
    });
    new lambda.CfnFunction(this, 'FunctionGetGoal', {
      functionName: {
        "Fn::Sub": "${ProjectName}-GetGoal"
      },
      description: "Get goal for user id",
      handler: "index.handler",
      memorySize: 256,
      runtime: "nodejs12.x",
      role: {
        "Fn::GetAtt": [
          "DynamoDbRole",
          "Arn"
        ]
      },
      timeout: 120,
      environment: {
        "variables": {
          "tableName": {
            "Ref": "ProjectName"
          }
        }
      },
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "GetGoalCode"
          ]
        }
      },
    });
    new lambda.CfnPermission(this, 'FunctionListGoalsPermissions', {
      action: "lambda:InvokeFunction",
      functionName: {
        "Ref": "FunctionListGoals"
      },
      principal: "apigateway.amazonaws.com",
      sourceArn: {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "AppApi"
            },
            "/*"
          ]
        ]
      },
    });
    new lambda.CfnPermission(this, 'FunctionCreateGoalPermissions', {
      action: "lambda:InvokeFunction",
      functionName: {
        "Ref": "FunctionCreateGoal"
      },
      principal: "apigateway.amazonaws.com",
      sourceArn: {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "AppApi"
            },
            "/*"
          ]
        ]
      },
    });
    new lambda.CfnPermission(this, 'FunctionDeleteGoalPermissions', {
      action: "lambda:InvokeFunction",
      functionName: {
        "Ref": "FunctionDeleteGoal"
      },
      principal: "apigateway.amazonaws.com",
      sourceArn: {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "AppApi"
            },
            "/*"
          ]
        ]
      },
    });
    new lambda.CfnPermission(this, 'FunctionUpdateGoalPermissions', {
      action: "lambda:InvokeFunction",
      functionName: {
        "Ref": "FunctionUpdateGoal"
      },
      principal: "apigateway.amazonaws.com",
      sourceArn: {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "AppApi"
            },
            "/*"
          ]
        ]
      },
    });
    new lambda.CfnPermission(this, 'FunctionGetGoalPermissions', {
      action: "lambda:InvokeFunction",
      functionName: {
        "Ref": "FunctionGetGoal"
      },
      principal: "apigateway.amazonaws.com",
      sourceArn: {
        "Fn::Join": [
          "",
          [
            "arn:aws:execute-api:",
            {
              "Ref": "AWS::Region"
            },
            ":",
            {
              "Ref": "AWS::AccountId"
            },
            ":",
            {
              "Ref": "AppApi"
            },
            "/*"
          ]
        ]
      },
    });
    //#endregion


    /* ###completed### api gateway objects */
    //#region 
    new apigateway.CfnRestApi(this, 'AppApi', {
      name: {
        "Ref": "ProjectName"
      },
      description: "API used for Goals requests",
      failOnWarnings: true,
    });
    new apigateway.CfnMethod(this, 'GoalsApiRequestGET', {
      authorizationType: "AWS_IAM",
      httpMethod: "GET",
      integration: {
        "type": "AWS_PROXY",
        "integrationHttpMethod": "POST",
        "uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "FunctionListGoals",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "integrationResponses": [
          {
            "statusCode": 200
          }
        ]
      },
      resourceId: {
        "Ref": "GoalsApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      methodResponses: [
        {
          "statusCode": 200,
          "responseModels": {
            "application/json": "Empty"
          }
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalsApiRequestOPTIONS', {
      resourceId: {
        "Ref": "GoalsApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      authorizationType: "None",
      httpMethod: "OPTIONS",
      integration: {
        "type": "MOCK",
        "integrationResponses": [
          {
            "responseParameters": {
              "methodResponseHeaderAccessControlAllowHeaders": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "methodResponseHeaderAccessControlAllowMethods": "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'",
              "methodResponseHeaderAccessControlAllowOrigin": "'*'"
            },
            "responseTemplates": {
              "application/json": ""
            },
            "statusCode": "200"
          }
        ],
        "passthroughBehavior": "WHEN_NO_MATCH",
        "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
        }
      },
      methodResponses: [
        {
          "responseModels": {
            "application/json": "Empty"
          },
          "responseParameters": {
            "methodResponseHeaderAccessControlAllowHeaders": true,
            "methodResponseHeaderAccessControlAllowMethods": true,
            "methodResponseHeaderAccessControlAllowOrigin": true
          },
          "statusCode": "200"
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalsApiRequestPOST', {
      authorizationType: "AWS_IAM",
      httpMethod: "POST",
      integration: {
        "type": "AWS_PROXY",
        "integrationHttpMethod": "POST",
        "uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "FunctionCreateGoal",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "integrationResponses": [
          {
            "statusCode": 200
          }
        ]
      },
      resourceId: {
        "Ref": "GoalsApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      methodResponses: [
        {
          "statusCode": 200,
          "responseModels": {
            "application/json": "Empty"
          }
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalItemApiRequestGET', {
      authorizationType: "AWS_IAM",
      httpMethod: "GET",
      integration: {
        "type": "AWS_PROXY",
        "integrationHttpMethod": "POST",
        "uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "FunctionGetGoal",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "integrationResponses": [
          {
            "statusCode": 200,
            "responseTemplates": {
              "application/json": "$input.json('$.body')"
            }
          }
        ]
      },
      requestParameters: {
        "methodRequestPathId": true
      },
      resourceId: {
        "Ref": "GoalItemApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      methodResponses: [
        {
          "statusCode": 200,
          "responseModels": {
            "application/json": "Empty"
          }
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalItemApiRequestOPTIONS', {
      resourceId: {
        "Ref": "GoalItemApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      authorizationType: "None",
      httpMethod: "OPTIONS",
      integration: {
        "type": "MOCK",
        "integrationResponses": [
          {
            "responseParameters": {
              "methodResponseHeaderAccessControlAllowHeaders": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "methodResponseHeaderAccessControlAllowMethods": "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'",
              "methodResponseHeaderAccessControlAllowOrigin": "'*'"
            },
            "responseTemplates": {
              "application/json": ""
            },
            "statusCode": "200"
          }
        ],
        "passthroughBehavior": "WHEN_NO_MATCH",
        "requestTemplates": {
          "application/json": "{\"statusCode\": 200}"
        }
      },
      methodResponses: [
        {
          "responseModels": {
            "application/json": "Empty"
          },
          "responseParameters": {
            "methodResponseHeaderAccessControlAllowHeaders": true,
            "methodResponseHeaderAccessControlAllowMethods": true,
            "methodResponseHeaderAccessControlAllowOrigin": true
          },
          "statusCode": "200"
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalItemApiRequestPUT', {
      authorizationType: "AWS_IAM",
      httpMethod: "PUT",
      integration: {
        "type": "AWS_PROXY",
        "integrationHttpMethod": "POST",
        "uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "FunctionUpdateGoal",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "integrationResponses": [
          {
            "statusCode": 200
          }
        ]
      },
      requestParameters: {
        "methodRequestPathId": true
      },
      resourceId: {
        "Ref": "GoalItemApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      methodResponses: [
        {
          "statusCode": 200,
          "responseModels": {
            "application/json": "Empty"
          }
        }
      ],
    });
    new apigateway.CfnMethod(this, 'GoalItemApiRequestDELETE', {
      authorizationType: "AWS_IAM",
      httpMethod: "DELETE",
      integration: {
        "type": "AWS_PROXY",
        "integrationHttpMethod": "POST",
        "uri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "FunctionDeleteGoal",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "integrationResponses": [
          {
            "statusCode": 200
          }
        ]
      },
      requestParameters: {
        "methodRequestPathId": true
      },
      resourceId: {
        "Ref": "GoalItemApiResource"
      },
      restApiId: {
        "Ref": "AppApi"
      },
      methodResponses: [
        {
          "statusCode": 200,
          "responseModels": {
            "application/json": "Empty"
          }
        }
      ],
    });
    new apigateway.CfnResource(this, 'GoalsApiResource', {
      restApiId: {
        "Ref": "AppApi"
      },
      parentId: {
        "Fn::GetAtt": [
          "AppApi",
          "RootResourceId"
        ]
      },
      pathPart: "goals",
    });
    new apigateway.CfnResource(this, 'GoalItemApiResource', {
      restApiId: {
        "Ref": "AppApi"
      },
      parentId: {
        "Ref": "GoalsApiResource"
      },
      pathPart: "{id}",
    });
    new apigateway.CfnAuthorizer(this, 'ApiAuthorizer', {
      authorizerResultTtlInSeconds: 300,
      identitySource: "method.request.header.Authorization",
      name: "CognitoDefaultUserPoolAuthorizer",
      providerArNs: [
        {
          "Fn::GetAtt": [
            "UserPool",
            "Arn"
          ]
        }
      ],
      restApiId: {
        "Ref": "AppApi"
      },
      type: "COGNITO_USER_POOLS",
    });
    new apigateway.CfnDeployment(this, 'APIDeployment', {
      description: "Prod deployment for API",
      restApiId: {
        "Ref": "AppApi"
      },
      stageName: "prod",
    });

    //#endregion

    /* ###completed### Cognito Objects*/
    //#region 
    new iam.CfnRole(this, 'SNSRole', {
      assumeRolePolicyDocument: {
        "version": "2012-10-17",
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "service": [
                "cognito-idp.amazonaws.com"
              ]
            },
            "action": [
              "sts:AssumeRole"
            ]
          }
        ]
      },
      policies: [
        {
          "policyName": "CognitoSNSPolicy",
          "policyDocument": {
            "version": "2012-10-17",
            "statement": [
              {
                "effect": "Allow",
                "action": "sns:publish",
                "resource": "*"
              }
            ]
          }
        }
      ],
    });
    new cognito.CfnUserPool(this, 'UserPool', {
      userPoolName: {
        "Ref": "ProjectName"
      },
      usernameAttributes: [
        "email"
      ],
      adminCreateUserConfig: {
        "allowAdminCreateUserOnly": false,
        "inviteMessageTemplate": {
          "emailMessage": "Your username is {username} and temporary password is {####}. ",
          "emailSubject": "Your temporary password",
          "smsMessage": "Your username is {username} and temporary password is {####}."
        },
        "unusedAccountValidityDays": 7
      },
      policies: {
        "passwordPolicy": {
          "minimumLength": 8,
          "requireLowercase": false,
          "requireNumbers": false,
          "requireSymbols": false,
          "requireUppercase": false
        }
      },
      autoVerifiedAttributes: [
        "email"
      ],
      emailVerificationMessage: "Here is your verification code: {####}",
      emailVerificationSubject: "Your verification code",
      schema: [
        {
          "name": "email",
          "attributeDataType": "String",
          "mutable": false,
          "required": true
        }
      ],
    });
    new cognito.CfnUserPoolClient(this, 'UserPoolClient', {
      clientName: {
        "Ref": "ProjectName"
      },
      generateSecret: false,
      userPoolId: {
        "Ref": "UserPool"
      },
    });
    new cognito.CfnIdentityPool(this, 'IdentityPool', {
      identityPoolName: {
        "Fn::Sub": "${ProjectName}Identity"
      },
      allowUnauthenticatedIdentities: true,
      cognitoIdentityProviders: [
        {
          "clientId": {
            "Ref": "UserPoolClient"
          },
          "providerName": {
            "Fn::GetAtt": [
              "UserPool",
              "ProviderName"
            ]
          }
        }
      ],
    });
    new iam.CfnRole(this, 'CognitoUnAuthorizedRole', {
      assumeRolePolicyDocument: {
        "version": "2012-10-17",
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "federated": "cognito-identity.amazonaws.com"
            },
            "action": [
              "sts:AssumeRoleWithWebIdentity"
            ],
            "condition": {
              "stringEquals": {
                "cognitoIdentityAmazonawsCom:aud": {
                  "Ref": "IdentityPool"
                }
              },
              "forAnyValue:stringLike": {
                "cognitoIdentityAmazonawsCom:amr": "unauthenticated"
              }
            }
          }
        ]
      },
      policies: [
        {
          "policyName": "CognitoUnauthorizedPolicy",
          "policyDocument": {
            "version": "2012-10-17",
            "statement": [
              {
                "effect": "Allow",
                "action": [
                  "mobileanalytics:PutEvents",
                  "cognito-sync:*"
                ],
                "resource": "*"
              }
            ]
          }
        }
      ],
    });
    new iam.CfnRole(this, 'CognitoAuthorizedRole', {
      assumeRolePolicyDocument: {
        "version": "2012-10-17",
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "federated": "cognito-identity.amazonaws.com"
            },
            "action": [
              "sts:AssumeRoleWithWebIdentity"
            ],
            "condition": {
              "stringEquals": {
                "cognitoIdentityAmazonawsCom:aud": {
                  "Ref": "IdentityPool"
                }
              },
              "forAnyValue:stringLike": {
                "cognitoIdentityAmazonawsCom:amr": "authenticated"
              }
            }
          }
        ]
      },
      policies: [
        {
          "policyName": "CognitoAuthorizedPolicy",
          "policyDocument": {
            "version": "2012-10-17",
            "statement": [
              {
                "effect": "Allow",
                "action": [
                  "mobileanalytics:PutEvents",
                  "cognito-sync:*",
                  "cognito-identity:*"
                ],
                "resource": "*"
              },
              {
                "effect": "Allow",
                "action": [
                  "execute-api:Invoke"
                ],
                "resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "AppApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            ]
          }
        }
      ],
    });
    new cognito.CfnIdentityPoolRoleAttachment(this, 'IdentityPoolRoleMapping', {
      identityPoolId: {
        "Ref": "IdentityPool"
      },
      roles: {
        "authenticated": {
          "Fn::GetAtt": [
            "CognitoAuthorizedRole",
            "Arn"
          ]
        },
        "unauthenticated": {
          "Fn::GetAtt": [
            "CognitoUnAuthorizedRole",
            "Arn"
          ]
        }
      },
    });
    //#endregion

    /* ###completed### S3 Objects*/
    //#region 
    new s3.CfnBucket(this, 'AssetsBucket', {
      accessControl: "Private",
      metricsConfigurations: [
        {
          "id": "EntireBucket"
        }
      ],
      websiteConfiguration: {
        "indexDocument": "index.html"
      },
    });
    new s3.CfnBucketPolicy(this, 'AssetsBucketPolicy', {
      bucket: {
        "Ref": "AssetsBucket"
      },
      policyDocument: {
        "statement": [
          {
            "action": "s3:GetObject",
            "effect": "Allow",
            "resource": {
              "Fn::Sub": "arn:aws:s3:::${AssetsBucket}/*"
            },
            "principal": {
              "aws": {
                "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${AssetsBucketOriginAccessIdentity}"
              }
            }
          }
        ]
      },
    });
    //#endregion

    /* cloudfront */
    //#region 
    new cloudfront.CfnCloudFrontOriginAccessIdentity(this, 'AssetsBucketOriginAccessIdentity', {
      cloudFrontOriginAccessIdentityConfig: {
        "comment": {
          "Fn::Sub": "OriginAccessIdentity for ${AssetsBucket}"
        }
      },
    });
    new cloudfront.CfnDistribution(this, 'AssetsCDN', {
      distributionConfig: {
        "enabled": true,
        "comment": {
          "Fn::Sub": "CDN for ${AssetsBucket}"
        },
        "defaultRootObject": "index.html",
        "origins": [
          {
            "domainName": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Sub": "${AssetsBucket}.s3"
                  },
                  {
                    "Fn::If": [
                      "IADRegion",
                      "",
                      {
                        "Fn::Sub": "-${AWS::Region}"
                      }
                    ]
                  },
                  ".amazonaws.com"
                ]
              ]
            },
            "id": "S3",
            "s3OriginConfig": {
              "originAccessIdentity": {
                "Fn::Sub": "origin-access-identity/cloudfront/${AssetsBucketOriginAccessIdentity}"
              }
            }
          }
        ],
        "defaultCacheBehavior": {
          "targetOriginId": "S3",
          "viewerProtocolPolicy": "https-only",
          "forwardedValues": {
            "queryString": "false"
          }
        }
      },
    });
    //#endregion

    /* codebuild/commit objects */
    //#region 
    new codecommit.CfnRepository(this, 'AssetsCodeRepository', {
      repositoryDescription: "Code repository for web application",
      repositoryName: {
        "Fn::Sub": "${ProjectName}-WebAssets"
      },
    });

    new iam.CfnRole(this, 'CodeBuildRole', {
      assumeRolePolicyDocument: {
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "service": [
                "codebuild.amazonaws.com"
              ]
            },
            "action": "sts:AssumeRole"
          }
        ]
      },
      policies: [
        {
          "policyName": "codebuild-policy",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:GetObjectVersion",
                  "s3:GetBucketVersioning"
                ],
                "resource": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "AssetsBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "PipelineArtifactsBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  }
                ],
                "effect": "Allow"
              }
            ]
          }
        },
        {
          "policyName": "codebuild-logs",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:CreateLogGroup",
                  "cloudfront:CreateInvalidation"
                ],
                "resource": "*",
                "effect": "Allow"
              }
            ]
          }
        }
      ],
      path: "/",
    });
    new iam.CfnRole(this, 'CodePipelineRole', {
      assumeRolePolicyDocument: {
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "service": [
                "codepipeline.amazonaws.com"
              ]
            },
            "action": "sts:AssumeRole"
          }
        ]
      },
      policies: [
        {
          "policyName": "codecommit-for-codepipeline",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "codecommit:GetBranch",
                  "codecommit:GetCommit",
                  "codecommit:UploadArchive",
                  "codecommit:GetUploadArchiveStatus",
                  "codecommit:CancelUploadArchive"
                ],
                "resource": {
                  "Fn::GetAtt": [
                    "AssetsCodeRepository",
                    "Arn"
                  ]
                },
                "effect": "Allow"
              }
            ]
          }
        },
        {
          "policyName": "artifacts-for-pipeline",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "s3:PutObject",
                  "s3:GetObject"
                ],
                "resource": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PipelineArtifactsBucket",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                },
                "effect": "Allow"
              }
            ]
          }
        },
        {
          "policyName": "codebuild-for-pipeline",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild"
                ],
                "resource": {
                  "Fn::GetAtt": [
                    "CodeBuildProject",
                    "Arn"
                  ]
                },
                "effect": "Allow"
              }
            ]
          }
        }
      ],
      path: "/",
    });
    new s3.CfnBucket(this, 'PipelineArtifactsBucket', {
      accessControl: "Private",
    });

    new codebuild.CfnProject(this, 'CodeBuildProject', {
      artifacts: {
        "type": "CODEPIPELINE"
      },
      description: {
        "Fn::Sub": "Building stage for ${ProjectName}."
      },
      environment: {
        "computeType": "BUILD_GENERAL1_SMALL",
        "environmentVariables": [
          {
            "name": "S3_BUCKET",
            "value": {
              "Ref": "PipelineArtifactsBucket"
            }
          }
        ],
        "image": "aws/codebuild/standard:2.0",
        "type": "LINUX_CONTAINER"
      },
      name: {
        "Fn::Sub": "${ProjectName}-build"
      },
      serviceRole: {
        "Ref": "CodeBuildRole"
      },
      source: {
        "type": "CODEPIPELINE",
        "buildSpec": {
          "Fn::Sub": "version: 0.2\nphases:\n  install:\n    runtime-versions:\n      nodejs: 10\n  pre_build:\n    commands:\n      - echo Installing NPM dependencies...\n      - npm install\n  build:\n    commands:\n      - npm run build\n  post_build:\n    commands:\n      - echo Uploading to AssetsBucket \n      - aws s3 cp --recursive ./build s3://${AssetsBucket}/ \n      - aws s3 cp --cache-control=\"max-age=0, no-cache, no-store, must-revalidate\" ./build/service-worker.js s3://${AssetsBucket}/\n      - aws s3 cp --cache-control=\"max-age=0, no-cache, no-store, must-revalidate\" ./build/index.html s3://${AssetsBucket}/\n      - aws cloudfront create-invalidation --distribution-id ${AssetsCDN} --paths /index.html /service-worker.js\n\nartifacts:\n  files:\n    - '**/*'\n  base-directory: build        \n"
        }
      },
      tags: [
        {
          "key": "app-name",
          "value": {
            "Ref": "ProjectName"
          }
        }
      ],
      timeoutInMinutes: 5,
    });
    new codepipeline.CfnPipeline(this, 'AssetsCodePipeline', {
      name: {
        "Fn::Sub": "${ProjectName}-Assets-Pipeline"
      },
      roleArn: {
        "Fn::GetAtt": [
          "CodePipelineRole",
          "Arn"
        ]
      },
      artifactStore: {
        "location": {
          "Ref": "PipelineArtifactsBucket"
        },
        "type": "S3"
      },
      stages: [
        {
          "name": "Source",
          "actions": [
            {
              "name": "Source",
              "inputArtifacts": [],
              "actionTypeId": {
                "version": "1",
                "category": "Source",
                "owner": "AWS",
                "provider": "CodeCommit"
              },
              "configuration": {
                "branchName": "master",
                "repositoryName": {
                  "Fn::Sub": "${ProjectName}-WebAssets"
                }
              },
              "outputArtifacts": [
                {
                  "name": {
                    "Fn::Sub": "${ProjectName}-SourceArtifact"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Build",
          "actions": [
            {
              "name": "build-and-deploy",
              "inputArtifacts": [
                {
                  "name": {
                    "Fn::Sub": "${ProjectName}-SourceArtifact"
                  }
                }
              ],
              "actionTypeId": {
                "category": "Build",
                "owner": "AWS",
                "version": "1",
                "provider": "CodeBuild"
              },
              "outputArtifacts": [
                {
                  "name": {
                    "Fn::Sub": "${ProjectName}-BuildArtifact"
                  }
                }
              ],
              "configuration": {
                "projectName": {
                  "Fn::Sub": "${ProjectName}-build"
                }
              },
              "runOrder": 1
            }
          ]
        }
      ],
    });
    new lambda.CfnFunction(this, 'SeederFunction', {
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "SeederFunctionBucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "SeederFunctionCode"
          ]
        }
      },
      description: "CodeCommit repository seeder",
      handler: "seeder.SeedRepositoryHandler",
      memorySize: 3008,
      role: {
        "Fn::GetAtt": [
          "SeederRole",
          "Arn"
        ]
      },
      runtime: "java8",
      timeout: 900,
    });
    new lambda.CfnFunction(this, 'UpdateConfigFunction', {
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "UpdateConfigCode"
          ]
        }
      },
      description: "Update config for CodeCommit repository",
      handler: "index.handler",
      role: {
        "Fn::GetAtt": [
          "SeederRole",
          "Arn"
        ]
      },
      runtime: "nodejs12.x",
      timeout: 300,
      environment: {
        "variables": {
          "apiUrl": {
            "Fn::Sub": "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
          },
          "branchName": "master",
          "region": {
            "Ref": "AWS::Region"
          },
          "repositoryName": {
            "Fn::Sub": "${ProjectName}-WebAssets"
          },
          "userPoolId": {
            "Ref": "UserPool"
          },
          "appClientId": {
            "Ref": "UserPoolClient"
          },
          "identityPoolId": {
            "Ref": "IdentityPool"
          }
        }
      },
    });
    //#endregion

    /* Seeder Role and Function  */
    //#region 

    new iam.CfnRole(this, 'SeederRole', {
      assumeRolePolicyDocument: {
        "statement": [
          {
            "action": [
              "sts:AssumeRole"
            ],
            "effect": "Allow",
            "principal": {
              "service": [
                "lambda.amazonaws.com"
              ]
            }
          }
        ],
        "version": "2012-10-17"
      },
      managedPolicyArns: [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      ],
      policies: [
        {
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "codecommit:GetRepository",
                  "codecommit:GitPush",
                  "codecommit:GetBranch",
                  "codecommit:PutFile"
                ],
                "effect": "Allow",
                "resource": {
                  "Fn::GetAtt": [
                    "AssetsCodeRepository",
                    "Arn"
                  ]
                }
              }
            ],
            "version": "2012-10-17"
          },
          "policyName": "SeederRolePolicy"
        },
        {
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "logs:*"
                ],
                "effect": "Allow",
                "resource": "arn:aws:logs:*:*:*"
              }
            ],
            "version": "2012-10-17"
          },
          "policyName": "LogsPolicy"
        }
      ],
    });
    new repositoryseeder.Cfnundefined(this, 'RepositorySeeder', {
      serviceToken: {
        "Fn::GetAtt": [
          "SeederFunction",
          "Arn"
        ]
      },
      sourceUrl: {
        "Fn::FindInMap": [
          "Constants",
          "AppKeys",
          "SeedRepository"
        ]
      },
      targetRepositoryName: {
        "Fn::Sub": "${ProjectName}-WebAssets"
      },
      targetRepositoryRegion: "${AWS::Region}",
    });
    new customresource.Cfnundefined(this, 'RepositoryUpdater', {
      serviceToken: {
        "Fn::GetAtt": [
          "UpdateConfigFunction",
          "Arn"
        ]
      },
      parameterOne: "Parameter to pass into Custom Lambda Function",
      dependsOn: "UpdateConfigFunction",
    });

    new iam.CfnRole(this, 'BucketCleanupRole', {
      assumeRolePolicyDocument: {
        "version": "2012-10-17",
        "statement": [
          {
            "effect": "Allow",
            "principal": {
              "service": [
                "lambda.amazonaws.com"
              ]
            },
            "action": [
              "sts:AssumeRole"
            ]
          }
        ]
      },
      managedPolicyArns: [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      ],
      policies: [
        {
          "policyName": "BucketCleanupPolicy",
          "policyDocument": {
            "statement": [
              {
                "action": [
                  "s3:List*",
                  "s3:DeleteObject"
                ],
                "effect": "Allow",
                "resource": [
                  {
                    "Fn::GetAtt": [
                      "AssetsBucket",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "PipelineArtifactsBucket",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "AssetsBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  },
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "PipelineArtifactsBucket",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  }
                ]
              }
            ],
            "version": "2012-10-17"
          }
        }
      ],
    });

    new lambda.CfnLayerVersion(this, 'PythonLambdaLayer', {
      compatibleRuntimes: [
        "python3.7",
        "python3.6"
      ],
      content: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "PythonLambdaLayer"
          ]
        }
      },
    });
    new lambda.CfnFunction(this, 'BucketCleanupFunction', {
      functionName: {
        "Fn::Sub": "${ProjectName}-BucketCleanup"
      },
      description: "Cleanup S3 buckets when deleting stack",
      handler: "index.handler",
      memorySize: 256,
      role: {
        "Fn::GetAtt": [
          "BucketCleanupRole",
          "Arn"
        ]
      },
      runtime: "python3.7",
      timeout: 30,
      layers: [
        {
          "Ref": "PythonLambdaLayer"
        }
      ],
      code: {
        "s3Bucket": {
          "Fn::FindInMap": [
            "S3Buckets",
            {
              "Ref": "AWS::Region"
            },
            "Bucket"
          ]
        },
        "s3Key": {
          "Fn::FindInMap": [
            "Constants",
            "S3Keys",
            "DeleteBucketsCode"
          ]
        }
      },
    });
    new customresource.Cfnundefined(this, 'DeleteBucketsObjects', {
      serviceToken: {
        "Fn::GetAtt": [
          "BucketCleanupFunction",
          "Arn"
        ]
      },
      bucketNames: [
        {
          "Ref": "AssetsBucket"
        },
        {
          "Ref": "PipelineArtifactsBucket"
        }
      ],
      dependsOn: [
        "BucketCleanupFunction",
        "BucketCleanupRole"
      ],
    });

    //#endregion
  }
}
